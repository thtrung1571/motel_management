generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  DIRTY
  MAINTENANCE
}

enum RentalStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

enum ShiftStatus {
  OPEN
  PENDING_HANDOVER
  CLOSED
}

enum ShiftTransactionType {
  ROOM_CHARGE
  SERVICE_CHARGE
  PAYMENT
  REFUND
  ADJUSTMENT
}

enum TransactionMethod {
  CASH
  TRANSFER
  CARD
  OTHER
}

enum VehicleType {
  CAR
  MOTORBIKE
  OTHER
}

enum InventoryType {
  DRINK
  SUPPLY
  OTHER
}

enum MaintenanceStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CANCELLED
}

enum DocumentType {
  ID_CARD
  PASSPORT
  DRIVER_LICENSE
  OTHER
}

enum CustomerFlag {
  SMOKER
  EATS_NOODLES
  LOVES_SPECIFIC_ROOM
  DIRTY_GUEST
  VIP
}

enum PreferenceKey {
  FAVOURITE_ROOM
  FAVOURITE_DRINK
  LOVE_CHAIR
  SMOKING
  NOTE
}

model User {
  id            String               @id @default(cuid())
  email         String               @unique
  name          String?
  passwordHash  String?
  role          String               @default("staff")
  createdAt     DateTime             @default(now())
  updatedAt     DateTime             @updatedAt
  shifts        Shift[]              @relation("ShiftOperator")
  closedShifts  Shift[]              @relation("ShiftCloser")
  maintenance   MaintenanceRequest[] @relation("MaintenanceAssignee")
  maintenanceCreated MaintenanceRequest[] @relation("MaintenanceCreator")
  customerNotes CustomerNote[]
}

model RoomType {
  id                   String   @id @default(cuid())
  name                 String
  description          String?
  basePriceCents       Int
  hourlyPriceCents     Int
  overnightPriceCents  Int
  allowOvernight       Boolean  @default(true)
  defaultDepositCents  Int      @default(0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  rooms                Room[]
  pricingRules         RoomPricingRule[]
}

model Room {
  id                String              @id @default(cuid())
  number            String              @unique
  floor             Int
  status            RoomStatus          @default(AVAILABLE)
  hasLoveChair      Boolean             @default(false)
  capacity          Int?                @default(2)
  bedCount          Int?                @default(1)
  notes             String?
  roomTypeId        String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  currentRentalId   String?             @unique
  roomType          RoomType?           @relation(fields: [roomTypeId], references: [id])
  currentRental     Rental?             @relation("RoomCurrentRental", fields: [currentRentalId], references: [id])
  rentals           Rental[]            @relation("RoomHistoricalRentals")
  statusHistory     RoomStatusHistory[]
  maintenanceEvents MaintenanceRequest[]
  preferredBy       CustomerFavouriteRoom[]
}

model RoomStatusHistory {
  id        String     @id @default(cuid())
  roomId    String
  status    RoomStatus
  note      String?
  shiftId   String?
  createdAt DateTime   @default(now())
  room      Room       @relation(fields: [roomId], references: [id])
  shift     Shift?     @relation(fields: [shiftId], references: [id])
}

model RoomPricingRule {
  id             String   @id @default(cuid())
  roomTypeId     String
  name           String
  description    String?
  minMinutes     Int
  maxMinutes     Int?
  priceCents     Int
  extraMinuteFee Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  roomType       RoomType @relation(fields: [roomTypeId], references: [id])
}

model Customer {
  id                    String                    @id @default(cuid())
  fullName              String
  alias                 String?
  citizenId             String?                   @unique
  passportNumber        String?                   @unique
  driverLicenseNumber   String?                   @unique
  phone                 String?
  email                 String?
  birthDate             DateTime?
  hometown              String?
  residence             String?
  gender                String?
  preferredLanguage     String?                   @default('vi')
  isWalkIn              Boolean                   @default(false)
  avatarUrl             String?
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @updatedAt
  archivedAt            DateTime?
  preferences           CustomerPreference[]
  notes                 CustomerNote[]
  documents             CustomerDocument[]
  flags                 CustomerFlagAssignment[]
  rentals               RentalGuest[]
  vehicles              CustomerVehicle[]
  favouriteRooms        CustomerFavouriteRoom[]
}

model CustomerDocument {
  id           String       @id @default(cuid())
  customerId   String
  type         DocumentType
  url          String
  issuedAt     DateTime?
  expiresAt    DateTime?
  metadata     Json?
  createdAt    DateTime     @default(now())
  customer     Customer     @relation(fields: [customerId], references: [id])
}

model CustomerPreference {
  id         String        @id @default(cuid())
  customerId String
  key        PreferenceKey
  value      String
  weight     Int           @default(1)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  customer   Customer      @relation(fields: [customerId], references: [id])
}

model CustomerNote {
  id         String   @id @default(cuid())
  customerId String
  authorId   String?
  content    String
  createdAt  DateTime @default(now())
  customer   Customer @relation(fields: [customerId], references: [id])
  author     User?    @relation(fields: [authorId], references: [id])
}

model CustomerFlagAssignment {
  id         String       @id @default(cuid())
  customerId String
  flag       CustomerFlag
  reason     String?
  createdAt  DateTime     @default(now())
  customer   Customer     @relation(fields: [customerId], references: [id])
}

model CustomerFavouriteRoom {
  id          String   @id @default(cuid())
  customerId  String
  roomId      String
  score       Int      @default(1)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  customer    Customer @relation(fields: [customerId], references: [id])
  room        Room     @relation(fields: [roomId], references: [id])
}

model Vehicle {
  id          String        @id @default(cuid())
  licensePlate String       @unique
  type        VehicleType   @default(MOTORBIKE)
  brand       String?
  model       String?
  color       String?
  imageUrl    String?
  notes       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  owners      CustomerVehicle[]
  rentals     RentalVehicle[]
}

model CustomerVehicle {
  id          String    @id @default(cuid())
  customerId  String
  vehicleId   String
  relation    String    @default('owner')
  isPrimary   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  customer    Customer  @relation(fields: [customerId], references: [id])
  vehicle     Vehicle   @relation(fields: [vehicleId], references: [id])
}

model Rental {
  id                     String              @id @default(cuid())
  code                   String              @unique
  status                 RentalStatus        @default(DRAFT)
  roomId                 String
  primaryGuestId         String?
  checkInAt              DateTime?
  plannedCheckOutAt      DateTime?
  checkOutAt             DateTime?
  shiftOpenedId          String?
  shiftClosedId          String?
  totalRoomChargeCents   Int                 @default(0)
  totalServiceChargeCents Int                @default(0)
  totalDiscountCents     Int                 @default(0)
  notes                  String?
  createdAt              DateTime            @default(now())
  updatedAt              DateTime            @updatedAt
  room                   Room                @relation("RoomHistoricalRentals", fields: [roomId], references: [id])
  currentRoom            Room?               @relation("RoomCurrentRental")
  primaryGuest           Customer?           @relation(fields: [primaryGuestId], references: [id])
  guests                 RentalGuest[]
  drinks                 RentalDrink[]
  vehicles               RentalVehicle[]
  payments               RentalPayment[]
  shiftOpened            Shift?              @relation("ShiftOpening", fields: [shiftOpenedId], references: [id])
  shiftClosed            Shift?              @relation("ShiftClosing", fields: [shiftClosedId], references: [id])
}

model RentalGuest {
  id          String   @id @default(cuid())
  rentalId    String
  customerId  String
  role        String   @default('guest')
  createdAt   DateTime @default(now())
  rental      Rental   @relation(fields: [rentalId], references: [id])
  customer    Customer @relation(fields: [customerId], references: [id])
}

model RentalDrink {
  id             String         @id @default(cuid())
  rentalId       String
  inventoryItemId String
  quantity       Int
  unitPriceCents Int
  createdAt      DateTime       @default(now())
  rental         Rental         @relation(fields: [rentalId], references: [id])
  inventoryItem  InventoryItem  @relation(fields: [inventoryItemId], references: [id])
}

model RentalVehicle {
  id        String   @id @default(cuid())
  rentalId  String
  vehicleId String
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  rental    Rental   @relation(fields: [rentalId], references: [id])
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
}

model RentalPayment {
  id            String             @id @default(cuid())
  rentalId      String
  shiftId       String?
  method        TransactionMethod
  amountCents   Int
  recordedAt    DateTime           @default(now())
  referenceCode String?
  note          String?
  rental        Rental             @relation(fields: [rentalId], references: [id])
  shift         Shift?             @relation(fields: [shiftId], references: [id])
}

model Shift {
  id                          String               @id @default(cuid())
  code                        String               @unique
  status                      ShiftStatus          @default(OPEN)
  startedAt                   DateTime             @default(now())
  endedAt                     DateTime?
  operatorId                  String?
  closingOperatorId           String?
  openingFloatCents           Int                  @default(0)
  closingFloatCents           Int?
  totalCashExpectedCents      Int                  @default(0)
  totalCashActualCents        Int?
  totalTransferExpectedCents  Int                  @default(0)
  totalTransferActualCents    Int?
  notes                       String?
  handoverNotes               String?
  previousShiftId             String?              @unique
  nextShiftId                 String?              @unique
  createdAt                   DateTime             @default(now())
  updatedAt                   DateTime             @updatedAt
  operator                    User?                @relation("ShiftOperator", fields: [operatorId], references: [id])
  closingOperator             User?                @relation("ShiftCloser", fields: [closingOperatorId], references: [id])
  previousShift               Shift?               @relation("ShiftChain", fields: [previousShiftId], references: [id])
  nextShift                   Shift?               @relation("ShiftChain", fields: [nextShiftId], references: [id])
  openings                    Rental[]             @relation("ShiftOpening")
  closings                    Rental[]             @relation("ShiftClosing")
  transactions                ShiftTransaction[]
  activityLogs                ShiftActivityLog[]
}

model ShiftTransaction {
  id            String               @id @default(cuid())
  shiftId       String
  rentalId      String?
  type          ShiftTransactionType
  method        TransactionMethod
  amountCents   Int
  description   String?
  occurredAt    DateTime             @default(now())
  shift         Shift                @relation(fields: [shiftId], references: [id])
  rental        Rental?              @relation(fields: [rentalId], references: [id])
}

model ShiftActivityLog {
  id        String   @id @default(cuid())
  shiftId   String
  type      String
  message   String
  payload   Json?
  createdAt DateTime @default(now())
  shift     Shift    @relation(fields: [shiftId], references: [id])
}

model InventoryItem {
  id                 String                @id @default(cuid())
  sku                String                @unique
  name               String
  type               InventoryType
  unit               String               @default('chai')
  unitPriceCents     Int                  @default(0)
  reorderThreshold   Int                  @default(0)
  trackStock         Boolean              @default(true)
  currentQuantity    Int                  @default(0)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  ledgerEntries      InventoryLedgerEntry[]
  rentalItems        RentalDrink[]
}

model InventoryLedgerEntry {
  id              String         @id @default(cuid())
  inventoryItemId String
  shiftId         String?
  quantityDelta   Int
  unitCostCents   Int            @default(0)
  referenceType   String?
  referenceId     String?
  note            String?
  createdAt       DateTime       @default(now())
  inventoryItem   InventoryItem  @relation(fields: [inventoryItemId], references: [id])
  shift           Shift?         @relation(fields: [shiftId], references: [id])
}

model MaintenanceRequest {
  id             String            @id @default(cuid())
  roomId         String
  title          String
  description    String?
  status         MaintenanceStatus @default(OPEN)
  priority       Int               @default(1)
  scheduledAt    DateTime?
  resolvedAt     DateTime?
  createdById    String?
  assignedToId   String?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  room           Room              @relation(fields: [roomId], references: [id])
  createdBy      User?             @relation("MaintenanceCreator", fields: [createdById], references: [id])
  assignedTo     User?             @relation("MaintenanceAssignee", fields: [assignedToId], references: [id])
  tasks          MaintenanceTask[]
}

model MaintenanceTask {
  id                 String             @id @default(cuid())
  maintenanceId      String
  description        String
  completedAt        DateTime?
  inventoryItemId    String?
  quantityUsed       Int                @default(0)
  maintenance        MaintenanceRequest @relation(fields: [maintenanceId], references: [id])
  inventoryItem      InventoryItem?     @relation(fields: [inventoryItemId], references: [id])
}

model AuditLog {
  id        String   @id @default(cuid())
  actorId   String?
  entity    String
  entityId  String?
  action    String
  payload   Json?
  createdAt DateTime @default(now())
}

model Setting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
