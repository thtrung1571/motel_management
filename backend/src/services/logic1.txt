const { PriceLogic } = require('../models');
const AppError = require('../utils/appError');

class PriceCalculationService {
  constructor(priceLogic) {
    this.priceLogic = priceLogic;
  }

  calculateHourlyCharge(durationHours, roomPrices, rentType, hasWarning = false, warningDetails = null) {
    // Xử lý rentType hourly
    if (rentType === 'hourly') {
      // Case 4: Đã có cảnh báo và vượt ngưỡng giờ -> chuyển sang nửa ngày
      if (hasWarning && 
          warningDetails?.suggestedType === 'half_day' &&
          durationHours > this.priceLogic.hourlyThreshold && 
          durationHours <= this.priceLogic.maxHalfDayHours) {
        return {
          ...this.calculateHalfDayCharge(durationHours, roomPrices),
          autoChanged: true,
          previousType: 'hourly',
          changedTo: 'half_day'
        };
      }

      // Case 5: Đã có cảnh báo và vượt ngưỡng nửa ngày -> chuyển sang nguyên ngày
      if (hasWarning && 
          warningDetails?.suggestedType === 'overnight' &&
          durationHours > this.priceLogic.maxHalfDayHours && 
          durationHours <= this.priceLogic.maxFullDayHours) {
        return {
          ...this.calculateOvernightCharge(durationHours, roomPrices),
          autoChanged: true,
          previousType: 'hourly',
          changedTo: 'overnight'
        };
      }

      // Case 1: Dưới ngưỡng giờ
      if (durationHours <= this.priceLogic.hourlyThreshold) {
        return this.calculateBasicHourlyRate(durationHours);
      }

      // Case 2: Vượt ngưỡng giờ nhưng chưa đến nửa ngày -> cảnh báo
      if (durationHours > this.priceLogic.hourlyThreshold && 
          durationHours <= this.priceLogic.maxHalfDayHours) {
        const hourlyCharge = this.calculateBasicHourlyRate(durationHours);
        return {
          ...hourlyCharge,
          warning: 'rentype_threshold',
          suggestedType: 'half_day',
          suggestedPrice: roomPrices.halfDayPrice,
          warningMessage: 'Thời gian thuê đã vượt quá ngưỡng tính giờ, nên chuyển sang tính nửa ngày'
        };
      }

      // Case 3: Vượt ngưỡng nửa ngày nhưng chưa đến nguyên ngày -> cảnh báo
      if (durationHours > this.priceLogic.maxHalfDayHours && 
          durationHours <= this.priceLogic.maxFullDayHours) {
        const hourlyCharge = this.calculateBasicHourlyRate(durationHours);
        return {
          ...hourlyCharge,
          warning: 'rentype_threshold',
          suggestedType: 'overnight',
          suggestedPrice: roomPrices.fullDayPrice,
          warningMessage: 'Thời gian thuê đã vượt quá ngưỡng nửa ngày, nên chuyển sang tính nguyên ngày'
        };
      }
    }

    return null;
  }

  calculateBasicHourlyRate(durationHours) {
    // Tính giá giờ đầu tiên
    if (durationHours <= 1) {
      return {
        type: 'hourly_base',
        amount: this.priceLogic.baseHourPrice,
        details: {
          hours: 1,
          basePrice: this.priceLogic.baseHourPrice,
          total: this.priceLogic.baseHourPrice
        }
      };
    }

    // Tính giá các giờ tiếp theo
    const additionalHours = Math.ceil(durationHours - 1);
    const additionalCharge = additionalHours * this.priceLogic.additionalHourPrice;
    const total = this.priceLogic.baseHourPrice + additionalCharge;

    return {
      type: 'hourly_mixed',
      amount: total,
      details: {
        firstHour: { 
          price: this.priceLogic.baseHourPrice 
        },
        additionalHours: {
          hours: additionalHours,
          pricePerHour: this.priceLogic.additionalHourPrice,
          total: additionalCharge
        },
        total
      }
    };
  }

  // Hàm chính để tính giá
  calculateCharge(durationHours, roomPrices, rentType, hasWarning = false, warningDetails = null) {
    switch (rentType) {
      case 'hourly':
        return this.calculateHourlyCharge(durationHours, roomPrices, rentType, hasWarning, warningDetails);
      case 'halfday':
        return this.calculateHalfDayCharge(durationHours, roomPrices);
      case 'overnight':
        return this.calculateOvernightCharge(durationHours, roomPrices);
      default:
        throw new Error('Loại thuê phòng không hợp lệ');
    }
  }

  // ... giữ nguyên các method khác ...
}

module.exports = PriceCalculationService;